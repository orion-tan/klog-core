services:
  klog-backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-dev}
        BUILD_TIME: ${BUILD_TIME:-unknown}
    image: klog-backend:latest
    container_name: klog-backend
    ports:
      - "${SERVER_PORT:-8010}:8010"
    volumes:
      # 持久化数据目录
      - ./db:/app/db
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      # 配置文件（可在宿主机修改后重启容器生效）
      - ./configs:/app/configs
    environment:
      # Gin运行模式：debug/release/test
      - GIN_MODE=${GIN_MODE:-release}
      # 时区设置
      - TZ=Asia/Shanghai
    restart: unless-stopped
    networks:
      - klog-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8010/health/live"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      - "com.klog.description=KLog博客系统后端API服务"
      - "com.klog.version=${VERSION:-dev}"

  # 可选：Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: klog-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-klog123456}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - klog-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "com.klog.description=Redis缓存服务"
    profiles:
      - full

  # 可选：MySQL数据库（生产环境推荐）
  mysql:
    image: mysql:8.0
    container_name: klog-mysql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-klog}
      MYSQL_USER: ${MYSQL_USER:-klog}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-klogpassword}
      TZ: Asia/Shanghai
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      # 可选：自定义MySQL配置
      # - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    restart: unless-stopped
    networks:
      - klog-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.klog.description=MySQL数据库服务"
    profiles:
      - full
      - mysql

  # 可选：Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: klog-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      # Nginx配置文件（需要自行创建）
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # 静态文件
      - ./uploads:/usr/share/nginx/html/uploads:ro
      # SSL证书（如果使用HTTPS）
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # 日志
      - ./nginx/logs:/var/log/nginx
    depends_on:
      klog-backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - klog-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "com.klog.description=Nginx反向代理服务"
    profiles:
      - full
      - nginx

networks:
  klog-network:
    driver: bridge
    labels:
      - "com.klog.description=KLog应用网络"

volumes:
  redis-data:
    driver: local
    labels:
      - "com.klog.description=Redis数据持久化卷"
  mysql-data:
    driver: local
    labels:
      - "com.klog.description=MySQL数据持久化卷"

